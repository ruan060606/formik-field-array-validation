{"ast":null,"code":"var _jsxFileName = \"/Users/stephenruan/Desktop/formik-field-array-validation/src/App.js\";\nimport React from \"react\";\nimport { Formik, Field, Form, FieldArray, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Debug } from \"./Debug\";\nimport \"./App.css\";\nconst initialValues = {\n  friends: [{\n    name: \"\",\n    email: \"\"\n  }]\n};\n\nconst App = () => React.createElement(\"div\", {\n  className: \"container\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"row\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  className: \"col-12\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, \"Invite friends\"), React.createElement(Formik, {\n  initialValues: initialValues,\n  validationSchema: Yup.object({\n    friends: Yup.array().of(Yup.object({\n      name: Yup.string().required(\"Required\"),\n      email: Yup.string().email(\"Invalid email\").required(\"Required\")\n    })).min(3, \"Must invite at least three friends\")\n  }),\n  onSubmit: (values, actions) => {\n    setTimeout(() => {\n      actions.setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n    }, 2000);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, ({\n  values,\n  errors,\n  isSubmitting\n}) => {\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(FieldArray, {\n    name: \"friends\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, ({\n    push,\n    remove\n  }) => React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, values.friends && values.friends.length > 0 && values.friends.map((_friend, index) => React.createElement(\"div\", {\n    key: index,\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"friends[\".concat(index, \"].name\"),\n    type: \"text\",\n    placeholder: \"Jane Doe\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"friends[\".concat(index, \"].name\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, msg => React.createElement(\"div\", {\n    className: \"p-2 text-red-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, msg))), React.createElement(\"div\", {\n    className: \"col-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"friends[\".concat(index, \"].email\"),\n    type: \"email\",\n    placeholder: \"jane@example.com\",\n    className: \"px-2 py-3 mr-3 border-solid border-grey-light border-2 rounded\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"friends[\".concat(index, \"].email\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, msg => React.createElement(\"div\", {\n    className: \"p-2 text-red-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, msg))), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => remove(index),\n    className: \"col-3\",\n    style: {\n      marginTop: 7\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"X\"))), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => push({\n      name: \"\",\n      email: \"\"\n    }),\n    className: \"w-full p-3 mb-3 text-xl uppercase font-bold shadow-md rounded\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Add Friend\"))), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    className: \"w-full p-3 mb-3 text-xl uppercase font-bold shadow-md rounded text-black \".concat(isSubmitting ? \"bg-grey\" : \"bg-green\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Invite\"), React.createElement(\"div\", {\n    className: \"p-2 text-red-dark text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, typeof errors.friends === \"string\" ? errors.friends : null), React.createElement(Debug, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n})));\n\nexport default App;","map":{"version":3,"sources":["/Users/stephenruan/Desktop/formik-field-array-validation/src/App.js"],"names":["React","Formik","Field","Form","FieldArray","ErrorMessage","Yup","Debug","initialValues","friends","name","email","App","object","array","of","string","required","min","values","actions","setTimeout","setSubmitting","alert","JSON","stringify","errors","isSubmitting","push","remove","length","map","_friend","index","msg","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Formik, Field, Form, FieldArray, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Debug } from \"./Debug\";\nimport \"./App.css\";\n\nconst initialValues = {\n  friends: [\n    {\n      name: \"\",\n      email: \"\"\n    }\n  ]\n};\n\nconst App = () => (\n  <div className=\"container\">\n    <div className=\"row\">\n      <h1 className=\"col-12\">Invite friends</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={Yup.object({\n          friends: Yup.array()\n            .of(\n              Yup.object({\n                name: Yup.string().required(\"Required\"),\n                email: Yup.string()\n                  .email(\"Invalid email\")\n                  .required(\"Required\")\n              })\n            )\n            .min(3, \"Must invite at least three friends\")\n        })}\n        onSubmit={(values, actions) => {\n          setTimeout(() => {\n            actions.setSubmitting(false);\n            alert(JSON.stringify(values, null, 2));\n          }, 2000);\n        }}\n      >\n        {({ values, errors, isSubmitting }) => {\n          return (\n            <Form>\n              <FieldArray name=\"friends\">\n                {({ push, remove }) => (\n                  <React.Fragment>\n                    {values.friends &&\n                      values.friends.length > 0 &&\n                      values.friends.map((_friend, index) => (\n                        <div key={index} className=\"row\">\n                          <div className=\"col-3\">\n                            <Field\n                              name={`friends[${index}].name`}\n                              type=\"text\"\n                              placeholder=\"Jane Doe\"\n                      \n                            />\n                            <ErrorMessage name={`friends[${index}].name`}>\n                              {msg => (\n                                <div className=\"p-2 text-red-dark\">{msg}</div>\n                              )}\n                            </ErrorMessage>\n                          </div>\n                          <div className=\"col-3\">\n                            <Field\n                              name={`friends[${index}].email`}\n                              type=\"email\"\n                              placeholder=\"jane@example.com\"\n                              className=\"px-2 py-3 mr-3 border-solid border-grey-light border-2 rounded\"\n                            />\n                            <ErrorMessage name={`friends[${index}].email`}>\n                              {msg => (\n                                <div className=\"p-2 text-red-dark\">{msg}</div>\n                              )}\n                            </ErrorMessage>\n                          </div>\n                          <button\n                            type=\"button\"\n                            onClick={() => remove(index)}\n                            className=\"col-3\"\n                            style={{ marginTop: 7 }}\n                          >\n                            X\n                          </button>\n                        </div>\n                      ))}\n\n                    <button\n                      type=\"button\"\n                      onClick={() => push({ name: \"\", email: \"\" })}\n                      className=\"w-full p-3 mb-3 text-xl uppercase font-bold shadow-md rounded\"\n                    >\n                      Add Friend\n                    </button>\n                  </React.Fragment>\n                )}\n              </FieldArray>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className={`w-full p-3 mb-3 text-xl uppercase font-bold shadow-md rounded text-black ${\n                  isSubmitting ? \"bg-grey\" : \"bg-green\"\n                }`}\n              >\n                Invite\n              </button>\n\n              <div className=\"p-2 text-red-dark text-center\">\n                {typeof errors.friends === \"string\" ? errors.friends : null}\n              </div>\n              <Debug />\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  </div>\n);\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}